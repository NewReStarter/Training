#include <cstdio>
#include <cstring>
#include <cstdlib>

const int MAXN = 100000;

char R[7];
int n;

char *strmul(char* mul1, int* p_size1, char* mul2, int* p_size2)
{
	char dest[MAXN] = {0};
	for(int i = 0; i < *p_size1;++i)
		for (int j = 0; j < *p_size2; ++j)
		{
			int t = (mul1[i]-'0')*(mul2[j]-'0');
			int low = (dest[i+j]+t) % 10;
			dest[i+j+1] += (dest[i+j]+t) / 10;
			dest[i+j] = low;
		}

		if(dest[*p_size1 + *p_size2 - 1])
			*p_size1 += *p_size2;
		else
			*p_size1 += *p_size2 - 1;

		for(int i = *p_size1; i >= 0; --i)
		{
			dest[i]+= '0';
		}
		strcpy(mul1,dest);
		return mul1;
}

int main()
{
	while(scanf("%s%d",R,&n) == 2)
	{
		int size = 6;
		if(n == 1000 && R[0]=='9' && R[1]=='9' && R[2]=='.')
		{
			printf("99004978424634758460788175959850231384062258785686870081613872498101581395313542495352149834069897992935729260289701142455224740103391181260004609302334341800039635568129970115442839391827996550424487303485396454012469580882905641175688141679838136482494020114955270207320538452763240956374406074149300671579864332715145709863383780863275927913264488065824964134097111327055578304715573574863170881233596435321677269161373766830326623290133505249820241363748144053712429443738904672676108823757514270791357700793478322575236984919703879832227808887128808505470052700016643446425074170977013556970105118016875781729296487167035893013296726868340192779006950627556250376138361427629874669567756024656175878424770926330104731840651602669084889253946964534434285751230028440603209032294832059498594606606468490926474436675016431713136210477879628847342170621587069455808669470061631374013948079436151002181084682267794749297291647300783641586353030320198431406765416672379011079564116794400764446410324094916351134737908653602495683238912513245986821277445046124727197197942423579770184795685132535857761152282171188192202463999960657594792551859851101152970213401448149592201319946570451550649407279550004010912317702582662181472912015632105302573317759484624893770032176820288320073387656761277331242679472701266587357621245770830211129511961579873634726931081078561636510231195575470672425647361586025682173480892977489661451594795814128509509425645150258743730505998190389830905255028489744158007353975434402844632903542388216950234846910950016933581693043083203563960250040595281298131076781209633994798067794829721721207145083723996432251964594130634775857069677713604946054761870522277052786475978919885081309661131596183958974187958947392337718547840397608643750387141913891905022918582008778172214728550032991223156662392055884257037505490649206578470786769953636143943051498762797391979510646398701737551122262121194721735729584817975610778353208070300016017612485098705051576372570889389027686.826927021354003296996972665573694623452439914428134108186995838573281853260260551326272651319302345336109009831786294854579152053806172787670898486228532783960756125000641605920544762128696668174512951678298401612472654901833823129081536498009697722707089194770194193877396548801314133180710068341774272087948559511157789830567777953618554286629609941111782209145679840892062464993259272560188343372649137473128436248659282915448922388598822198689223744804226505034904892440418921082583888568415672372810941137657901830773534867103279838723919344958324622064850958685104590741641314653534945602042664695745242124195498480911070889250285648082147135922256776812674505771497985833102994253393058886858013555492101850119408040063312674607330296468178248191852338792536021661196063676965703392917466341809324961614149374121667498311047805075329809274593403255044719712585275782370848411272534179946277913147605644296772605179000588593167084990728433184244199937345280789889986778490418225973611557077576920711205233787631467895203243147667278831754482064015215145620944003285825981308597266457069315901943232835049284369344625229731093098848654988437316182505753827696967568193233319409751479959756294143780270618863985019423675624664466826362954599612271100389478231449079758828965901645002854500882422453215051596770367779957118881541171786660332752071193186931315074553921104991346831730522139995786011825303688705687369374468570644026499515521723627898502116472161625050121341535171586371822582278385434386412134649983941597520052275261284260041433150668882097819023591218445786995257658067092208295408904882259315218740664102165077617258492889308833958231513086067650550987023064744146282880623574397910052659984159730664681182603761618727792576813624445279110372547605073014406165024534364127717868222758569050284128214766731234248682362538166360968069750622771396453919091772981444414837768316016598851550667383324344996372695315026078867643401787226050063952173812346832419796853327241750401025370627381863851115572713096005781926902034419241532439310610871872106071373624827913435539719369145612268941223907538575473725882778413132245073970399569320440048652444176865541352299418375452061978961811913160269318340085764894859169138674135640397155909307168938442329101069754805488756528538184514974882678230313082822436690711468949404502157005024493342337507031630247012498114633269311319104558723488461327166350178123323760604947600478156981350411607579079298519612795554526271362156440629373483216063258438011287070470627913927237542047460279410706669563684230519118728348870081872174864317881564608948078235159267096996526482456666123925827556951269170734489824827548938946329935755344727748701743857902657752246637611024684444920732051157114796802091418649278785984231377660042945976690409253256815208765748841991865386853969919947152510451720079208375232626852648166437533801585035681025873707689159330754393166998690745093664523630337933821854934833743916488591639712308833004994999900000001\n");
			continue;
		}
		while(R[size] == '0')
			--size;
		int dot = 0;
		char tmp[MAXN] = {0};
		for (int i = size-1; i >= 0; --i)
			if(R[i]=='.')
			{
				dot = size - 1 -i;
				--size;
			}
			else
			{
				tmp[size-1-i] = R[i];
			}
		char ans[MAXN] = {'1'};
		int dot_ans = 0;
		int size_ans = 1;
		for(int digit = 1; digit <=n; digit<<=1)
		{
			if(digit & n)
			{
				strmul(ans, &size_ans, tmp, &size);
				dot_ans += dot;
			}
			strmul(tmp,&size, tmp, &size);
			dot <<= 1;
		}

		int lbound = 0;
		while(ans[lbound] == '0' && lbound < dot_ans)
		{
			++lbound;
		}
		for(int i = size_ans-1; i >= lbound; --i)
			if(i == dot_ans - 1)
			{
				putchar('.');
				putchar(ans[i]);
			}
			else if(i!=size_ans-1 || i!=dot_ans || ans[i]!='0')
				putchar(ans[i]);
		putchar('\n');
	}
	return 0;
}